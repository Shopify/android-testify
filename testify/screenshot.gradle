/**
 * Created by danieljette on 15-11-25.
 * Copyright Â© 2015 Shopify. All rights reserved.
 */

boolean isRecordMode = false;
String testRunner;
String applicationPackage;

android {
    defaultConfig {
        testRunner = testInstrumentationRunner;
        applicationPackage = applicationId;
    }
}

private String getAdbPath() {
    return project.android.getAdbExe().toString();
}

private String getDeviceImageDirectory() {
    return "/data/data/com.shopify.shopify.debug/app_images/";
}

private void pullScreenshots() {
    println("Copying files...")

    def src = getDeviceImageDirectory() + "."
    def dst = "./Shopify/src/androidTest/assets/screenshots/" + getDeviceKey() + "/"
    def command = [getAdbPath(), "-e", 'pull', src, dst]
    command.execute()

    // Wait for all the files to be committed to disk
    sleep(10000);

    println("Ready")
}

private String getDeviceKey() {

    def versionLine = new ByteArrayOutputStream()
    exec {
        executable(getAdbPath())
        args(['-e', 'shell', 'getprop', 'ro.build.version.sdk'])
        standardOutput = versionLine
    }
    String version = versionLine.toString().trim();

    def densityLine = new ByteArrayOutputStream()
    exec {
        executable(getAdbPath())
        args(['-e', 'shell', 'wm', 'density'])
        standardOutput = densityLine;
    }
    String density = densityLine.toString().substring("Physical density: ".length()).trim();

    def sizeLine = new ByteArrayOutputStream()
    exec {
        executable(getAdbPath())
        args(['-e', 'shell', 'wm', 'size'])
        standardOutput = sizeLine;
    }
    String size = sizeLine.toString().substring("Physical size: ".length()).trim();
    return version + "-" + size + "@" + density + "dp";
}

task recordMode(type: DefaultTask, group: "Screenshot", description: "Enable recording of the baseline images for Android screenshot tests") {
    doFirst {
        startDemoMode()
        isRecordMode = true;
    }
}

private void startDemoMode() {
        [getAdbPath(), "-e", "shell", "settings", "put global sysui__allowed 1"].execute()
        [getAdbPath(), "-e", "shell", "am broadcast", "-a com.android.systemui.demo", "-e command clock", "-e hhmm 0000"].execute()
        [getAdbPath(), "-e", "shell", "am broadcast", "-a com.android.systemui.demo", "-e command network", "-e mobile show", "-e level 4", "-e datatype 4g"].execute()
        [getAdbPath(), "-e", "shell", "am broadcast", "-a com.android.systemui.demo", "-e command battery", "-e level 100", "-e plugged false"].execute()
}

task pullScreenshots(type: DefaultTask, group: "Screenshot", description: "Download the Android screenshot test images from the device") {
    doLast {
        pullScreenshots();
    }
}

task clearScreenshots(type: DefaultTask, group: "Screenshot", description: "Remove any existing screenshot test images from the device") {
    doLast {
        def command = [getAdbPath(), '-e', 'shell', 'rm', getDeviceImageDirectory() + "*.png"]
        def process = command.execute()
        process.in.eachLine { line -> println line }
    }
}

private void hidePasswords() {
    def hidePasswords = [getAdbPath(), '-e', 'shell', 'settings', 'put', 'system','show_password', '0' ]
    hidePasswords.execute()
}

task screenshotTest(type: DefaultTask, dependsOn: [":Shopify:installDebug", ":Shopify:installDebugAndroidTest"], group: "Screenshot", description: "Run the Android screenshot tests") {
    doFirst {
        startDemoMode()
    }
    doLast {

        hidePasswords();

        def command = [getAdbPath(), '-e', 'shell', 'am', 'instrument', '-e','annotation', 'com.shopify.testify.annotation.ScreenshotInstrumentation', '-w', applicationPackage + ".debug.test/" + testRunner ]
        def log = command.execute().text
        log.eachLine { line -> println line }

        if (!isRecordMode && (log.contains("FAILURES!!!") || log.contains("INSTRUMENTATION_CODE: 0") || log.contains("Process crashed while executing")) ) {
            throw new Exception("Screenshot tests failed");
        }

        if (isRecordMode) {
            pullScreenshots();
        }
    }
}
